[pytest]
log_cli = 1
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)4s] %(message)s
log_format = %(asctime)s [%(levelname)4s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S
log_date_format = %H:%M:%S
markers =
#   special markers
    staging: test to be excluded from run in verifier/pr-validation/sanity jobs and run test in staging job
    sanity: test runs in sanity testrun
    smoke: test runs in smoke testrun
#   functional markers
    container: tests for container creation
    grpc
    grpc_api: standard gRPC API tests
    grpc_control: tests related to using neofs-cli control commands
    grpc_object_lock: gRPC lock tests
    http_gate: HTTP gate contract
    s3_gate: All S3 gate tests
    s3_gate_base: Base S3 gate tests
    s3_gate_bucket: Bucket S3 gate tests
    s3_gate_locking: Locking S3 gate tests
    s3_gate_multipart: S3 gate tests with multipart object
    s3_gate_object: Object S3 gate tests
    s3_gate_tagging: Tagging S3 gate tests
    s3_gate_versioning: Versioning S3 gate tests
    long: long tests (with long execution time)
    node_mgmt: neofs control commands
    session_token: tests for operations with session token
    static_session: tests for operations with static session token
    bearer: tests for bearer tokens
    acl: All tests for ACL
    acl_basic: tests for basic ACL
    acl_bearer: tests for ACL with bearer
    acl_extended: tests for extended ACL
    acl_filters: tests for extended ACL with filters and headers
    storage_group: tests for storage groups
    failover: tests for system recovery after a failure
    failover_panic: tests for system recovery after panic reboot of a node
    failover_network: tests for network failure
    failover_reboot: tests for system recovery after reboot of a node
    add_nodes: add nodes to cluster
    check_binaries: check neofs installed binaries versions
    payments: tests for payment associated operations
    load: performance tests
    benchmark
#   issues markers
    nspcc_dev__neofs_node__issue_2030
    nspcc_dev__neofs_testcases__issue_527
    nspcc_dev__neofs_testcases__issue_535
    nspcc_dev__neofs_testcases__issue_537
    nspcc_dev__neofs_testcases__issue_542
    nspcc_dev__neofs_testcases__issue_544
    nspcc_dev__neofs_testcases__issue_558
    nspcc_dev__neofs_testcases__issue_559

parametrize(
parametrize("bucket_versioning", ["ENABLED", "SUSPENDED"])
parametrize("containers_count", CONTAINERS_COUNT)
parametrize("deny_role", [EACLRole
parametrize("hard_reboot", [True, False])
parametrize("list_type", ["v1", "v2"])
parametrize("load_nodes_count", LOAD_NODES_COUNT)
parametrize("load_time", LOAD_TIME)
parametrize("load_type", LOAD_TYPE)
parametrize("name", ["", "test-container"], ids=["No name", "Set particular name"])
parametrize("node_count", STORAGE_NODE_COUNT)
parametrize("obj_count", OBJ_COUNT)
parametrize("obj_size, out_file", list(zip(OBJ_SIZE, OUT_FILE)))
parametrize("role", [EACLRole
parametrize("sequence", [True, False])
parametrize("sync_type", ["sync", "cp"])
parametrize("version_id", [None, "second"])
parametrize("writers, readers, deleters", list(zip(WRITERS, READERS, DELETERS)))
payments
s3_gate
s3_gate_base
s3_gate_bucket
s3_gate_locking
s3_gate_multipart
s3_gate_object
s3_gate_tagging
s3_gate_versioning
sanity
session_token
shard
skipif(FREE_STORAGE, reason="Test only works on public network with paid storage")
skip(reason="https
skip(reason="Need to clarify scenario")
smoke
static_session
static_session_container
storage_group